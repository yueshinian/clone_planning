#pragma once

#include <utility>

// Base class for all the steering functions
class GNode_base
{
public:

    virtual ~GNode_base() = default;

    /// Cost associated to the best Node selected
    float steer_cost{};

    /// Number of outgoing edges per node
    int nEdges{};

    /// Cost per each orientation associated to the node
    double *costs{};

    /// array of possible orientations
    double *orientations{};


    /// flag to read orientations from Map
    int READ_OR{};

    int CHECK_SUCCESSOR{};

    int goal_x{};
    int goal_y{};

    int start_x{};
    int start_y{};

    /// X and Y coordinates of the Node
    int x{}, y{};

    double x_r{}, y_r{};

    /// Flag to indicate if node hase been generated by a steering function
    bool steer{};

    /// Orientation associated to the best node
    double theta{};

    bool hasParent{};

    GNode_base *parent{};
    GNode_base *child{};

    // ============================================================================================
    /// line(GNode *successor,GNode *parent_node)
    /// Check if there is a geometric line of sight between the two nodes
    /// ============================================================================================
    static bool line(const GNode_base *successor, const GNode_base *parent_node);

    static bool line(double x0, double y0, double y1, double x1);

    // ============================================================================================
    /// bool isblock(double x, double y)
    /// Check if the cell is blocked by an obstacle
    /// ============================================================================================
    static bool isblock(double x, double y);
};
